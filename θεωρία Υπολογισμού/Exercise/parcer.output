Terminals unused in grammar

    T_ID
    KW_integer
    KW_scalar
    KW_str
    KW_boolean
    KW_True
    KW_False
    KW_const
    KW_if
    KW_else
    KW_endif
    KW_for
    KW_in
    KW_endfor
    KW_while
    KW_endwhile
    KW_break
    KW_continue
    KW_not
    KW_and
    KW_or
    KW_def
    KW_enddef
    KW_main
    KW_return
    KW_com
    KW_endcomp
    KW_of
    T_FLOAT
    OP_MUL
    OP_DIV
    OP_MOD
    OP_EXP
    OP_EQ
    OP_NOTEQ
    OP_LESS
    OP_LEQ
    OP_GREATER
    OP_GEQ
    OP_EQUAL
    OP_INCREM
    OP_DECREM
    OP_MULCREM
    OP_DIVCREM
    OP_MODCREM
    DEL_LPAR
    DEL_RPAR
    DEL_COMMA
    DEL_LBRAC
    DEL_RBRAC
    DEL_DOTS
    DEL_DOT
    COMM_STR
    NEW_LINE
    '*'
    '/'


State 12 conflicts: 1 shift/reduce
State 13 conflicts: 1 shift/reduce


Grammar

    0 $accept: program_start $end

    1 program_start: ε
    2              | program_body

    3 program_body: expr
    4             | program_body expr
    5             | program_body expr ';'

    6 expr: T_INT
    7     | T_STRING
    8     | expr OP_PLUS expr
    9     | expr OP_MINUS expr
   10     | expr DEL_QUEST


Terminals, with rules where they appear

    $end (0) 0
    '*' (42)
    '/' (47)
    ';' (59) 5
    error (256)
    T_ID <str> (258)
    KW_integer (259)
    KW_scalar (260)
    KW_str (261)
    KW_boolean (262)
    KW_True (263)
    KW_False (264)
    KW_const (265)
    KW_if (266)
    KW_else (267)
    KW_endif (268)
    KW_for (269)
    KW_in (270)
    KW_endfor (271)
    KW_while (272)
    KW_endwhile (273)
    KW_break (274)
    KW_continue (275)
    KW_not (276)
    KW_and (277)
    KW_or (278)
    KW_def (279)
    KW_enddef (280)
    KW_main (281)
    KW_return (282)
    KW_com (283)
    KW_endcomp (284)
    KW_of (285)
    T_INT <str> (286) 6
    T_FLOAT <str> (287)
    T_STRING <str> (288) 7
    OP_PLUS (289) 8
    OP_MINUS (290) 9
    OP_MUL (291)
    OP_DIV (292)
    OP_MOD (293)
    OP_EXP (294)
    OP_EQ (295)
    OP_NOTEQ (296)
    OP_LESS (297)
    OP_LEQ (298)
    OP_GREATER (299)
    OP_GEQ (300)
    OP_EQUAL (301)
    OP_INCREM (302)
    OP_DECREM (303)
    OP_MULCREM (304)
    OP_DIVCREM (305)
    OP_MODCREM (306)
    DEL_QUEST (307) 10
    DEL_LPAR (308)
    DEL_RPAR (309)
    DEL_COMMA (310)
    DEL_LBRAC (311)
    DEL_RBRAC (312)
    DEL_DOTS (313)
    DEL_DOT (314)
    COMM_STR (315)
    NEW_LINE (316)


Nonterminals, with rules where they appear

    $accept (65)
        on left: 0
    program_start (66)
        on left: 1 2
        on right: 0
    program_body <str> (67)
        on left: 3 4 5
        on right: 2 4 5
    expr <str> (68)
        on left: 6 7 8 9 10
        on right: 3 4 5 8 9 10


State 0

    0 $accept: • program_start $end
    1 program_start: ε •  [$end]
    2              | • program_body
    3 program_body: • expr
    4             | • program_body expr
    5             | • program_body expr ';'
    6 expr: • T_INT
    7     | • T_STRING
    8     | • expr OP_PLUS expr
    9     | • expr OP_MINUS expr
   10     | • expr DEL_QUEST

    T_INT     shift, and go to state 1
    T_STRING  shift, and go to state 2

    $default  reduce using rule 1 (program_start)

    program_start  go to state 3
    program_body   go to state 4
    expr           go to state 5


State 1

    6 expr: T_INT •

    $default  reduce using rule 6 (expr)


State 2

    7 expr: T_STRING •

    $default  reduce using rule 7 (expr)


State 3

    0 $accept: program_start • $end

    $end  shift, and go to state 6


State 4

    2 program_start: program_body •  [$end]
    4 program_body: program_body • expr
    5             | program_body • expr ';'
    6 expr: • T_INT
    7     | • T_STRING
    8     | • expr OP_PLUS expr
    9     | • expr OP_MINUS expr
   10     | • expr DEL_QUEST

    T_INT     shift, and go to state 1
    T_STRING  shift, and go to state 2

    $default  reduce using rule 2 (program_start)

    expr  go to state 7


State 5

    3 program_body: expr •  [$end, T_INT, T_STRING]
    8 expr: expr • OP_PLUS expr
    9     | expr • OP_MINUS expr
   10     | expr • DEL_QUEST

    OP_PLUS    shift, and go to state 8
    OP_MINUS   shift, and go to state 9
    DEL_QUEST  shift, and go to state 10

    $default  reduce using rule 3 (program_body)


State 6

    0 $accept: program_start $end •

    $default  accept


State 7

    4 program_body: program_body expr •  [$end, T_INT, T_STRING]
    5             | program_body expr • ';'
    8 expr: expr • OP_PLUS expr
    9     | expr • OP_MINUS expr
   10     | expr • DEL_QUEST

    OP_PLUS    shift, and go to state 8
    OP_MINUS   shift, and go to state 9
    DEL_QUEST  shift, and go to state 10
    ';'        shift, and go to state 11

    $default  reduce using rule 4 (program_body)


State 8

    6 expr: • T_INT
    7     | • T_STRING
    8     | • expr OP_PLUS expr
    8     | expr OP_PLUS • expr
    9     | • expr OP_MINUS expr
   10     | • expr DEL_QUEST

    T_INT     shift, and go to state 1
    T_STRING  shift, and go to state 2

    expr  go to state 12


State 9

    6 expr: • T_INT
    7     | • T_STRING
    8     | • expr OP_PLUS expr
    9     | • expr OP_MINUS expr
    9     | expr OP_MINUS • expr
   10     | • expr DEL_QUEST

    T_INT     shift, and go to state 1
    T_STRING  shift, and go to state 2

    expr  go to state 13


State 10

   10 expr: expr DEL_QUEST •

    $default  reduce using rule 10 (expr)


State 11

    5 program_body: program_body expr ';' •

    $default  reduce using rule 5 (program_body)


State 12

    8 expr: expr • OP_PLUS expr
    8     | expr OP_PLUS expr •  [$end, T_INT, T_STRING, OP_PLUS, OP_MINUS, DEL_QUEST, ';']
    9     | expr • OP_MINUS expr
   10     | expr • DEL_QUEST

    DEL_QUEST  shift, and go to state 10

    DEL_QUEST  [reduce using rule 8 (expr)]
    $default   reduce using rule 8 (expr)

    Conflict between rule 8 and token OP_PLUS resolved as reduce (%left OP_PLUS).
    Conflict between rule 8 and token OP_MINUS resolved as reduce (%left OP_MINUS).

    shift/reduce conflict on token DEL_QUEST:
        8 expr: expr OP_PLUS expr •
       10 expr: expr • DEL_QUEST
      Example: expr OP_PLUS expr • DEL_QUEST
      Shift derivation
        expr
        ↳ 8: expr OP_PLUS expr
                          ↳ 10: expr • DEL_QUEST
      Reduce derivation
        expr
        ↳ 10: expr                     DEL_QUEST
              ↳ 8: expr OP_PLUS expr •



State 13

    8 expr: expr • OP_PLUS expr
    9     | expr • OP_MINUS expr
    9     | expr OP_MINUS expr •  [$end, T_INT, T_STRING, OP_PLUS, OP_MINUS, DEL_QUEST, ';']
   10     | expr • DEL_QUEST

    DEL_QUEST  shift, and go to state 10

    DEL_QUEST  [reduce using rule 9 (expr)]
    $default   reduce using rule 9 (expr)

    Conflict between rule 9 and token OP_PLUS resolved as reduce (%left OP_PLUS).
    Conflict between rule 9 and token OP_MINUS resolved as reduce (%left OP_MINUS).

    shift/reduce conflict on token DEL_QUEST:
        9 expr: expr OP_MINUS expr •
       10 expr: expr • DEL_QUEST
      Example: expr OP_MINUS expr • DEL_QUEST
      Shift derivation
        expr
        ↳ 9: expr OP_MINUS expr
                           ↳ 10: expr • DEL_QUEST
      Reduce derivation
        expr
        ↳ 10: expr                      DEL_QUEST
              ↳ 9: expr OP_MINUS expr •

